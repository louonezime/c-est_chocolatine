name: 'chocolatine'

on:
  push:
    branches-ignore:
    - "ga-ignore-*"
  pull_request:
    branches-ignore:
    - "ga-ignore-*"

env:
  MIRROR_URL: "git@github.com:EpitechPromo2027/B-DOP-200-PAR-2-2-chocolatine-lou.onezime.git"
  EXECUTABLES: "fizzbuzz"
  ARGUMENTS: "10 15"

jobs:
  check_coding_style:
    name: "check for coding style errors"
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          check.sh $(pwd) $(pwd)
          cat coding-style-reports.log | while read LINE; do
            TYPE=$(echo $LINE | cut -d ':' -f 3 | tr -d ' ')
            FILE=$(echo $LINE | cut -d ':' -f 1)
            AT=$(echo $LINE | cut -d ':' -f 2)
            CODE=$(echo $LINE | cut -d ':' -f 4)
            BANANA=$(echo "$TYPE coding style error: $FILE#L$AT")
            echo "::error file=$FILE,line=$AT,title=$TYPE coding style error::$CODE"
          done
          if [[ "$(cat coding-style-reports.log)" != "" ]]
          then
            exit 1
          fi

  check_program_compilation:
    # needs: [check_coding_style]
    name: "verify that each file specified in the EXECUTABLES environment variable exists and is executable"
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: 0
      - run: make
        timeout-minutes: 2
      - run: make clean
      - run: |
          OIFS=$IFS
          IFS=' '
          for x in $EXECUTABLES
            do
              ./$x $ARGUMENTS
            done
          IFS=$OIFS
          if [[ -n $EXECUTABLES ]]
          then
            echo Program not compiled properly
          fi

  run_tests:
    needs: [check_program_compilation]
    name: "runs tests bc that's what heroes do"
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    needs: [run_tests]
    if: ${{ github.event_name == 'push' }}
    name: "pushes all files to mirror specified"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}
